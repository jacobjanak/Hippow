{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["jwt","require","NodeRSA","window","generateKeys","key","b","public","exportKey","private","generateSignature","publicKey","privateKey","data","sign","algorithm","verify","signature","algorithms","decode","complete","importKey","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6aAAMA,EAAMC,EAAQ,KACdC,EAAUD,EAAQ,KAGxBE,OAAOC,aAAe,WACpB,IAAMC,EAAM,IAAIH,EAAQ,CAAEI,EAAG,MAC7B,MAAO,CACLC,OAAQF,EAAIG,UAAU,UACtBC,QAASJ,EAAIG,UAAU,aAI3BL,OAAOO,kBAAoB,SAASC,EAAWC,EAAYC,GAEzD,OADKA,IAAMA,EAAO,IACXb,EAAIc,KAAKD,EAAMD,EAAY,CAChCG,UAAW,WAIfZ,OAAOa,OAAS,SAASC,EAAWN,GAEjBX,EAAIgB,OAAOC,EAAWN,EADjB,CAAEO,WAAY,CAAC,WAErBlB,EAAImB,OAAOF,EAAW,CAAEG,UAAU,KAGpDjB,OAAOkB,UAAY,SAAST,GAC1B,IAAMP,EAAM,IAAIH,EAEhB,OADAG,EAAIgB,UAAUT,GACP,CACLL,OAAQF,EAAIG,UAAU,UACtBC,QAASJ,EAAIG,UAAU,aAUZc,MANf,WACE,OACE,qBAAKC,UAAU,SCxBJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.727bec0c.chunk.js","sourcesContent":["const jwt = require('jsonwebtoken');\nconst NodeRSA = require('node-rsa');\n\n\nwindow.generateKeys = function() {\n  const key = new NodeRSA({ b: 512 });\n  return {\n    public: key.exportKey('public'),\n    private: key.exportKey('private'),\n  }\n}\n\nwindow.generateSignature = function(publicKey, privateKey, data) {\n  if (!data) data = {};\n  return jwt.sign(data, privateKey, {\n    algorithm: \"RS256\"\n  });\n}\n\nwindow.verify = function(signature, publicKey) {\n  const verifyOptions = { algorithms: [\"RS256\"] };\n  const verified = jwt.verify(signature, publicKey, verifyOptions);\n  const decoded = jwt.decode(signature, { complete: true });\n}\n\nwindow.importKey = function(privateKey) {\n  const key = new NodeRSA();\n  key.importKey(privateKey);\n  return {\n    public: key.exportKey('public'),\n    private: key.exportKey('private'),\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\"></div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}